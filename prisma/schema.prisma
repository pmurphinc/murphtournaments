// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid()) @db.Text
  name            String?      @db.Text
  email           String?      @unique @db.Text
  emailVerified   DateTime?
  image           String?      @db.Text
  accounts        Account[]
  sessions        Session[]
  teamMemberships TeamMember[] @relation("UserTeamMemberships")
  Team            Team[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid()) @db.Text
  userId            String  @db.Text
  type              String  @db.Text
  provider          String  @db.Text
  providerAccountId String  @db.Text
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @db.Text
  sessionToken String   @unique @db.Text
  userId       String   @db.Text
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String   @db.Text
  token      String   @unique @db.Text
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.Text
  slug      String   @unique @db.Text
  ownerId   String   @db.Text
  logoUrl   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  owner   User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members TeamMember[]

  @@index([ownerId])
  @@map("teams")
}

model TeamMember {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId    String   @db.Uuid
  userId    String   @db.Text
  role      String?  @db.Text
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation("UserTeamMemberships", fields: [userId], references: [id], onDelete: Cascade)
}

model Tournament {
  id        String   @id @default(cuid()) @db.Text
  title     String   @db.Text
  startsAt  DateTime
  status    String   @db.Text
  entries   Entry[]
}

model Entry {
  id           String     @id @default(cuid()) @db.Text
  playerName   String     @db.Text
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String     @db.Text
}